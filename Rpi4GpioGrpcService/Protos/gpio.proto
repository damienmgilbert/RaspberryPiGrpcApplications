syntax = "proto3";

option csharp_namespace = "Rpi4GpioGrpcService";
import "google/protobuf/empty.proto";
package gpio;

service Commander {
  rpc IsPinOpen (IsPinOpenRequest) returns (IsPinOpenReply);
  rpc OpenPin (OpenPinRequest) returns (OpenPinReply);
  rpc ClosePin (ClosePinRequest) returns (ClosePinReply);
  rpc GetPinMode (GetPinModeRequest) returns (GetPinModeReply);
  rpc SetPinMode (SetPinModeRequest) returns (SetPinModeReply);
  rpc Read (ReadRequest) returns (ReadReply);
  rpc Write (WriteRequest) returns (WriteReply);
  rpc IsPinModeSupported(IsPinModeSupportedRequest) returns (IsPinModeSupportedReply);
  rpc GetNumberingScheme(GetNumberingSchemeRequest) returns (GetNumberingSchemeReply);
  rpc GetPinCount(GetPinCountRequest) returns (GetPinCountReply);
  rpc RegisterPinCallback(RegisterPinCallbackRequest) returns (RegisterPinCallbackReply);
  rpc UnregisterPinCallback(UnregisterPinCallbackRequest) returns (UnregisterPinCallbackReply);
  rpc PinEvent(google.protobuf.Empty) returns (stream PinEventReply);
}

message PinEventReply {
	int32 pinNumber = 1;
	PinEventTypes changeType = 2;
}

message RegisterPinCallbackRequest {
	int32 pinNumber = 1;
	PinEventTypes eventType = 2;
}

message RegisterPinCallbackReply {

}

message UnregisterPinCallbackRequest {
	int32 pinNumber = 1;
	PinEventTypes eventType = 2;
}

message UnregisterPinCallbackReply {

}

enum PinMode {
	PIN_MODES_INPUT = 0;
	PIN_MODES_OUTPUT = 1;
	PIN_MODES_INPUT_PULL_DOWN = 2;
	PIN_MODES_INPUT_PULL_UP = 3;
}

enum PinEventTypes {
	PIN_EVENT_TYPES_NONE = 0;
	PIN_EVENT_TYPES_RISING = 1;
	PIN_EVENT_TYPES_FALLING = 2;
}

message GetPinCountRequest {

}

message GetPinCountReply {
	int32 pinCount = 1;
}

message GetNumberingSchemeRequest {

}

message GetNumberingSchemeReply {
	string numberingScheme = 1;
}

message IsPinModeSupportedRequest {
	int32 pinNumber = 1;
	PinMode pinMode = 2;
}

message IsPinModeSupportedReply {
	bool isPinModeSupported = 1;
}

message ReadRequest {
  int32 pinNumber = 1;
}

message ReadReply {
  int32 pinValue = 1;
}

message WriteRequest {
  int32 pinNumber = 1;
  int32 pinValue = 2;
}

message WriteReply {
  bool didWrite = 1;
}

message IsPinOpenRequest {
  int32 pinNumber = 1;
}

message IsPinOpenReply {
  bool isPinOpen = 1;
}

message ClosePinRequest {
  int32 pinNumber = 1;
}

message ClosePinReply {
  bool isPinClosed = 1;
}

message GetPinModeRequest {
  int32 pinNumber = 1;
}

message GetPinModeReply {
  PinMode pinMode = 1;
}

message SetPinModeRequest {
  int32 pinNumber = 1;
  PinMode pinMode = 2;
}

message SetPinModeReply {
  bool isSet = 1;
}

message OpenPinRequest {
  int32 pinNumber = 1;
}

message OpenPinReply {
  bool isPinOpen = 1;
}
